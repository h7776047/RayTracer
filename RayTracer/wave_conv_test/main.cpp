#include <windows.h>
#include <mmsystem.h>
#include <stdio.h>
#pragma comment(lib, "winmm.lib")
struct wavFileHeader
{
    long chunkId;           //"RIFF" (0x52,0x49,0x46,0x46)
    long chunkSize;         // (fileSize - 8)  - could also be thought of as bytes of data in file following this field (bytesRemaining)
    long riffType;          // "WAVE" (0x57415645)
};

struct fmtChunk
{
    long chunkId;                       // "fmt " - (0x666D7420)
    long chunkDataSize;                 // 16 + extra format bytes
    short compressionCode;              // 1 - 65535
    short numChannels;                  // 1 - 65535
    long sampleRate;                    // 1 - 0xFFFFFFFF
    long avgBytesPerSec;                // 1 - 0xFFFFFFFF
    short blockAlign;                   // 1 - 65535
    short significantBitsPerSample;     // 2 - 65535
    short extraFormatBytes;             // 0 - 65535
};

struct wavChunk
{
    long chunkId;
    long chunkDataSize;
};

double a[1024]={e-005,0.00479303,0.00543473,0.00431828,0.00202238,-0.00201214,0.000256009,-0.00330823,-0.00627399,-0.00691564,-0.00488137,-0.0075126,-0.00777233,-0.00602957,-0.0103511,-0.00926664,-0.00732393,-0.00819533,-0.00592446,-0.00543488,-0.00579259,-0.00435542,-0.00180566,-0.00215295,-0.00260774,-0.00220003,-0.00285369,-0.00248401,-0.00286228,-0.00274115,-0.00292623,-0.00293359,-0.00283023,-0.00324776,-0.00268747,-0.00264913,-0.00250776,-0.00291685,-0.003036,-0.00285767,-0.00252172,-0.00165247,-0.00183648,-0.00149316,-0.00175674,-0.00169387,-0.001631,-0.00143136,-0.00114985,-0.00132081,-0.00104987,-0.00166106,-0.00169526,-0.000995904,-0.00082572,-0.000619464,-0.000693957,-0.000717375,-0.00109129,-0.00154718,-0.000959573,-0.000572741,-0.000286957,-0.000162489,-0.000694893,-0.000598538,-0.000553188,0.00198379,0.00127997,-0.00305143,0.00180123,-0.000852887,-0.00205658,0.00369658,0.000340946,0.00122508,0.00469418,0.00162833,-0.0024442,0.000970924,0.00161596,-0.00287371,-0.00131107,0.000785432,-0.000297334,-0.000724135,0.000259417,0.000506761,0.000301766,0.00013523,0.000478691,0.000643422,-4.49999e-005,-0.000141186,-0.000301232,-0.00031279,-8.2474e-006,7.52434e-006,-0.000160664,7.59306e-005,-0.000158592,-0.000235675,-5.08027e-005,-0.000488133,-0.000598523,-0.000424811,-0.000458037,-0.000357685,-0.000306799,-0.000360135,-0.000242946,-6.9308e-005,-0.000101517,-0.000125517,-6.95895e-005,-8.46889e-005,-5.68995e-005,-7.50727e-005,-6.58314e-005,-5.68342e-005,-6.5722e-005,-8.82297e-005,-0.000117198,-0.000118857,-0.000125566,-0.000123335,-0.000144445,-0.000137141,-0.000108814,-0.000110345,-7.10384e-005,-6.26362e-005,-5.51585e-005,-6.29484e-005,-7.77129e-005,-9.21306e-005,-6.87557e-005,-4.68484e-005,-6.6912e-005,-5.08414e-005,-6.15956e-005,-4.37626e-005,-2.59296e-005,-3.40544e-005,-3.47708e-005,-2.76573e-005,-2.42073e-005,-5.52159e-005,-7.40602e-005,-4.39934e-005,-2.49931e-005,-1.01245e-005,-2.16992e-005,-2.69636e-005,-2.21501e-005,-3.73483e-005,-2.19767e-005,-1.84747e-005,-6.53578e-006,3.90626e-006,-1.63828e-005,-2.69289e-005,-1.65295e-006,1.77289e-005,1.35278e-005,7.33891e-006,5.38578e-006,8.2461e-006,-8.93983e-006,-2.44728e-005,-6.08486e-006,-1.9011e-006,-1.05114e-005,8.67158e-008,2.03411e-005,2.11269e-005,2.61831e-005,3.07311e-005,2.44208e-005,2.85352e-005,2.87086e-005,1.52155e-005,3.46863e-007,4.33579e-007,5.02952e-007,3.98893e-007,4.68265e-007,4.68265e-007,2.42804e-007,8.03093e-005,0,-0.000120464,0.000321237,-0.00052201,0.000803093,-0.00116448,0.00152588,-0.00216835,0.00269036,-0.00317222,0.00369423,-0.00120464,0.0759324,0.0500327,-0.116047,0.0627215,-0.0285499,-0.0588667,0.154033,0.00570196,0.0393515,0.181258,0.057662,-0.107775,0.0300758,0.0563771,-0.122713,-0.0628821,0.0160618,-0.0284295,-0.0446921,-0.00192742,0.00417608,-0.00289113,-0.00678613,0.00265021,0.00959696,-0.00883402,-0.00530041,-0.0114441,-0.0117653,-0.000200773,0.000240928,-0.00622397,0.0030116,-0.00590273,-0.00871355,-0.00172665,-0.018431,-0.0226071,-0.0159414,-0.0173468,-0.0134116,-0.0114441,-0.0135723,-0.00887417,-0.00224866,-0.00357376,-0.00445716,-0.00240928,-0.0030116,-0.00192742,-0.00269036,-0.00244943,-0.00208804,-0.00240928,-0.00329268,-0.00437685,-0.00445716,-0.00469809,-0.00461778,-0.00542087,-0.00513979,-0.00405562,-0.00409577,-0.00261005,-0.00228881,-0.00200773,-0.00228881,-0.00285098,-0.00341314,-0.00252974,-0.00172665,-0.00248959,-0.00188727,-0.00228881,-0.00160619,-0.000923556,-0.00124479,-0.00128495,-0.00100387,-0.000883402,-0.00204789,-0.00277067,-0.00164634,-0.000923556,-0.000361392,-0.000803093,-0.00100387,-0.000803093,-0.00136526,-0.000803093,-0.000682629,-0.000240928,0.000160619,-0.000602319,-0.00100387,-4.01546e-005,0.000682629,0.00052201,0.000281082,0.000200773,0.000321237,-0.000321237,-0.000923556,-0.000240928,-8.03093e-005,-0.000401546,0,0.000762938,0.000803093,0.00100387,0.00116448,0.000923556,0.00108417,0.00108417,0.000562165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double hrtf[128]={0.0002,0,-0.0003,0.0008,-0.0013,0.0020,-0.0029,0.0038,-0.0054,0.0067,-0.0079,0.0092,-0.0030,0.1891,0.1246,-0.2890,0.1562,-0.0711,-0.1466,0.3836,0.0142,0.0980,0.4514,0.1436,-0.2684,0.0749,0.1404,-0.3056,-0.1566,0.0400,-0.0708,-0.1113,-0.0048,0.0104,-0.0072,-0.0169,0.0066,0.0239,-0.0220,-0.0132,-0.0285,-0.0293,-0.0005,0.0006,-0.0155,0.0075,-0.0147,-0.0217,-0.0043,-0.0459,-0.0563,-0.0397,-0.0432,-0.0334,-0.0285,-0.0338,-0.0221,-0.0056,-0.0089,-0.0111,-0.0060,-0.0075,-0.0048,-0.0067,-0.0061,-0.0052,-0.0060,-0.0082,-0.0109,-0.0111,-0.0117,-0.0115,-0.0135,-0.0128,-0.0101,-0.0102,-0.0065,-0.0057,-0.0050,-0.0057,-0.0071,-0.0085,-0.0063,-0.0043,-0.0062,-0.0047,-0.0057,-0.0040,-0.0023,-0.0031,-0.0032,-0.0025,-0.0022,-0.0051,-0.0069,-0.0041,-0.0023,-0.0009,-0.0020,-0.0025,-0.0020,-0.0034,-0.0020,-0.0017,-0.0006,0.0004,-0.0015,-0.0025,-0.0001,0.0017,0.0013,0.0007,0.0005,0.0008,-0.0008,-0.0023,-0.0006,-0.0002,-0.0010,0,0.0019,0.0020,0.0025,0.0029,0.0023,0.0027,0.0027,0.0014};
double hrtf2[128]={0};
char *readFileData(char *szFilename, long &dataLengthOut)
{
    FILE *fp = fopen(szFilename, "rb");
    long len;
    char *buffer;
    fseek(fp, 0, SEEK_END);
    len = ftell(fp);
    fseek(fp, 0, SEEK_SET);
    buffer = (char*) calloc(1, len+1);
    fread(buffer, 1, len, fp);
    fclose(fp);
    dataLengthOut = len;
    return buffer;
}

void parseWav(char *data)
{
    long *mPtr;
    long *tmpPtr;

    short *buffer;
    short *buffer2;

    WAVEFORMATEX wf;
    volatile WAVEHDR wh,wh_back;
    HWAVEOUT hWaveOut;

    fmtChunk mFmtChunk;
    wavChunk mDataChunk;

    mPtr = (long*)data;

    if ( mPtr[0] == 0x46464952) //  little endian check for 'RIFF'
    {
        mPtr += 3;
        if (mPtr[0] == 0x20746D66)  // little endian for "fmt "
        {
            printf("Format chunk found\n");

            tmpPtr = mPtr;
            memcpy(&mFmtChunk, tmpPtr, sizeof(mFmtChunk));
            
            tmpPtr += 2;
            tmpPtr += mFmtChunk.chunkDataSize/4;

            mPtr = tmpPtr;
            if (mPtr[0] == 0x61746164)        // little endian for "data"
            {
                printf("Data chunk found\n");

                tmpPtr = mPtr;
                memcpy(&mDataChunk, tmpPtr, sizeof(mDataChunk));
                mPtr += 2;

                buffer = (short*) malloc(mDataChunk.chunkDataSize);
                memcpy(buffer, mPtr, mDataChunk.chunkDataSize);

                printf("sampleRate: %d\nnChannels: %d\nchunkDataSize: %d\n", 
                    mFmtChunk.sampleRate,
                    mFmtChunk.numChannels,
                    mDataChunk.chunkDataSize);

                buffer2 = new short[mDataChunk.chunkDataSize/2];
                hrtf2[0]=1;
                for ( int i = 0; i < mDataChunk.chunkDataSize/2; i+=2 )
                {
                    buffer2[i] = 0;                       // set to zero before sum
                    for ( int j = 0; j < 1024; j++ )
                    {
                        buffer2[i] += (short)(buffer[i - j*2] * a[j]);    // convolve: multiply and accumulate
                    }
                }
                for ( int i = 1; i < mDataChunk.chunkDataSize/2; i+=2 )
                {
                    buffer2[i] = 0;                       // set to zero before sum
                    for ( int j = 0; j < 1024; j++ )
                    {
                        buffer2[i] += (short)(buffer[i - j*2] * a[j]);    // convolve: multiply and accumulate
                    }
                }
                char * buf=(char*)buffer2;
                for(int i=0; i<mDataChunk.chunkDataSize;++i)
                {
                    //if(buf[i]!=buffer[i]) printf("%d %d\n",buf[i],buffer[i]);
                }

                wf.wFormatTag = mFmtChunk.compressionCode;
                wf.nChannels = mFmtChunk.numChannels;
                wf.nSamplesPerSec = mFmtChunk.sampleRate;
                wf.nAvgBytesPerSec = mFmtChunk.avgBytesPerSec;
                wf.nBlockAlign = mFmtChunk.blockAlign;
                wf.wBitsPerSample = mFmtChunk.significantBitsPerSample;
                wf.cbSize = mFmtChunk.extraFormatBytes;

                wh.lpData = (char*)buffer2;
                wh.dwBufferLength = mDataChunk.chunkDataSize;
                wh.dwFlags = 0;
                wh.dwLoops = 0;
                printf("start\n");
                waveOutOpen(&hWaveOut,WAVE_MAPPER,&wf,0,0,CALLBACK_NULL);
                waveOutPrepareHeader(hWaveOut,(wavehdr_tag*)&wh,sizeof(wh));
                waveOutWrite(hWaveOut,(wavehdr_tag*)&wh,sizeof(wh));

                do {}
                while (!(wh.dwFlags & WHDR_DONE));

                waveOutUnprepareHeader(hWaveOut,(wavehdr_tag*)&wh,sizeof(wh));
                waveOutClose(hWaveOut);

                free(buffer);
            }
            else printf("INvalid WAV\n");
        }
        

    }

    else
        printf("INvalid WAV\n");
}


int main()
{
    char *filename = "tada.wav";
    char *buffer;
    long fileSize;

    buffer = readFileData(filename, fileSize);
    parseWav(buffer);

    free(buffer);
    system("pause");
    return 0;
}